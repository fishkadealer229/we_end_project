import logging
import requests
import os
from time import sleep
from config import token
from aiogram import Bot, Dispatcher, executor, types
bot = Bot(token=token)
dp = Dispatcher(bot)
db_values = []
register_flag = False
admin_flag = False
search_flag = False
update_flag = False
new_value = True
flag = False
flag1 = True
flag2 = False
photo_flag = False
stop = False
authorize_flag = False
password = ''
update_value = ''
count_values = 1
last_username = ''
mes_id = ''
value1 = 0
json = {}
blank_values = ["–ò–º—è –§–∞–º–∏–ª–∏—è", "–ü–æ–ª", "–Æ–∑–µ—Ä–Ω–µ–π–º", '–î–æ–ª–∂–Ω–æ—Å—Ç—å', '–ü–∞—Ä–æ–ª—å']
asks = ['—Å–≤–æ—ë –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é', '—Å–≤–æ–π –ø–æ–ª', '—Å–≤–æ–π —é–∑–µ—Ä–Ω–µ–π–º', "—Å–≤–æ—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å –≤ –∫–æ–º–ø–∞–Ω–∏–∏", '—Å–≤–æ–π –ø–∞—Ä–æ–ª—å']
ind = 0
logging.basicConfig(level=logging.INFO)


@dp.message_handler(commands=['start'])
async def begin(message: types.Message):
    global db_values, register_flag, admin_flag, search_flag, update_flag, new_value, flag, flag1, flag2, photo_flag
    global stop, password, update_value, count_values, last_username, ind, authorize_flag, value1
    db_values = []
    register_flag = False
    admin_flag = False
    search_flag = False
    update_flag = False
    new_value = True
    flag = False
    flag1 = True
    flag2 = False
    photo_flag = False
    stop = False
    authorize_flag = False
    password = ''
    update_value = ''
    count_values = 1
    last_username = ''
    ind = 0
    response = requests.get(f'http://127.0.0.1:5000/staff_api/user/id/{message.from_user.id}')
    if response:
        response = response.json()
        status = response['status']  # bool
        is_admin = response['is_admin']  # bool
        if is_admin:
            admin_flag = True
        if status:
            keyboard = types.InlineKeyboardMarkup()
            keyboard.insert(types.InlineKeyboardButton(text='–î–∞', callback_data='search'))
            keyboard.insert(types.InlineKeyboardButton(text='–ù–µ—Ç', callback_data='ok'))
            await message.answer('–•–æ—Ç–∏—Ç–µ –∫–æ–≥–æ-—Ç–æ –Ω–∞–π—Ç–∏?', reply_markup=keyboard)
        else:
            keyboard = types.InlineKeyboardMarkup()
            keyboard.insert(types.InlineKeyboardButton(text='–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è', callback_data='common'))
            keyboard.insert(types.InlineKeyboardButton(text='–í–æ–π—Ç–∏', callback_data='authorize'))
            await message.answer('–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –±–æ—Ç –¥–ª—è —Å–≤—è–∑–∏ –º–µ–∂–¥—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏ –æ–¥–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∫–æ–º–ø–∞–Ω–∏–µ–π'
                                 ' "–ù–∏–≥—ç–∑ –°—Ç—É–¥–∏–æ".', reply_markup=types.ReplyKeyboardRemove())
            await message.answer('–ú—ã –Ω–µ –Ω–∞—à–ª–∏ –≤–∞—Å –≤ —Å–ø–∏—Å–∫–∞—Ö –∫–æ–º–ø–∞–Ω–∏–∏, –ø–æ—ç—Ç–æ–º—É –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è–∏–ª–∏ –≤–æ–π—Ç–∏',
                                 reply_markup=keyboard)
    else:
        await message.answer('–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞')
        await message.answer(f'"Http —Å—Ç–∞—Ç—É—Å:", {response.status_code}, "(", {response.reason}, ")")')


@dp.message_handler(commands=['menu'])
async def menu(message: types.Message):
    if stop:
        await message.answer('–£–ø—Å... –ü–æ—Ö–æ–∂–µ —É –≤–∞—Å —Å–∫—Ä—ã—Ç —é–∑–µ—Ä–Ω–µ–π–º. –û—Ç–∫—Ä–æ–π—Ç–µ –µ–≥–æ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞')
    else:
        keyboard = types.InlineKeyboardMarkup()
        keyboard.insert(types.InlineKeyboardButton(text='–ó–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è', callback_data='common'))
        keyboard.insert(types.InlineKeyboardButton(text='–í–æ–π—Ç–∏', callback_data='authorize'))
        keyboard.add(types.InlineKeyboardButton(text='–ü–æ–∏—Å–∫', callback_data='search'))
        keyboard.add(types.InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É', callback_data='update_blank'))
        await message.answer('–í–æ—Ç, —á—Ç–æ –º–æ–∂–µ—Ç —ç—Ç–æ—Ç –±–æ—Ç—è—Ä–∞.', reply_markup=keyboard)


@dp.message_handler(commands=['help'])
async def help1(message: types.Message):
    if stop:
        await message.answer('–£–ø—Å... –ü–æ—Ö–æ–∂–µ —É –≤–∞—Å —Å–∫—Ä—ã—Ç —é–∑–µ—Ä–Ω–µ–π–º. –û—Ç–∫—Ä–æ–π—Ç–µ –µ–≥–æ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞')
    else:
        await message.answer('–ß—Ç–æ!?')
        sleep(2)
        await message.answer('–ö–æ–º—É —Ç–æ —Ä–µ–∞–ª—å–Ω–æ –ø–æ–Ω–∞–¥–æ–±–∏–ª–∞—Å—å –ø–æ–º–æ—â—å –≤ —ç—Ç–æ–º –Ω–∞–∏–ª–µ–≥—á–∞–π—à–µ–º –±–æ—Ç—è—Ä–µ?')
        sleep(2)
        await message.answer('OK. –ü—Ä–æ—Å—Ç–æ –ø–æ—á–∏—Ç–∞–π—Ç–µ –∫–Ω–∏–≥—É "workerStuffBot –¥–ª—è —á–∞–π–Ω–∏–∫–æ–≤"')
        sleep(2)
        await message.answer('–ë–µ—Å—è—Ç —É–∂–µ —ç—Ç–∏ –∫–æ–∂–∞–Ω–Ω—ã–µ üëø üëø üëø üëø')


@dp.callback_query_handler(text='common')
async def register_asks(call: types.CallbackQuery):
    global asks, ind, stop
    if stop:
        await call.message.answer('–£–ø—Å... –ü–æ—Ö–æ–∂–µ —É –≤–∞—Å —Å–∫—Ä—ã—Ç —é–∑–µ—Ä–Ω–µ–π–º. –û—Ç–∫—Ä–æ–π—Ç–µ –µ–≥–æ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞')
    else:
        telegram_values = [call.from_user.first_name + " " + call.from_user.last_name, '–ú—É–∂—á–∏–Ω–∞',
                           call.from_user.username, '', '', '']
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        if ind <= 2:
            if len(telegram_values[ind]) != 0:
                keyboard.add(types.KeyboardButton(text=f'{telegram_values[ind]}'))
            else:
                await call.message.answer('–£–ø—Å... –ü–æ—Ö–æ–∂–µ —É –≤–∞—Å —Å–∫—Ä—ã—Ç —é–∑–µ—Ä–Ω–µ–π–º. –û—Ç–∫—Ä–æ–π—Ç–µ –µ–≥–æ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞')
                stop = True
        if ind == 1:
            keyboard.add(types.KeyboardButton(text='–ñ–µ–Ω—â–∏–Ω–∞'))
        if ind < len(asks):
            await call.message.answer(f'–£–∫–∞–∂–∏—Ç–µ {asks[ind]}', reply_markup=keyboard)
        else:
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(types.InlineKeyboardButton(text='–î–∞', callback_data='update_blank'))
            keyboard.add(types.InlineKeyboardButton(text='–ù–µ—Ç', callback_data='end_register'))
            await call.message.answer('–•–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É?', reply_markup=keyboard)


@dp.callback_query_handler(text='authorize')
async def authorize(call: types.CallbackQuery):
    global authorize_flag, value1
    if stop:
        await call.message.answer('–£–ø—Å... –ü–æ—Ö–æ–∂–µ —É –≤–∞—Å —Å–∫—Ä—ã—Ç —é–∑–µ—Ä–Ω–µ–π–º. –û—Ç–∫—Ä–æ–π—Ç–µ –µ–≥–æ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞')
    else:
        authorize_flag = True
        if value1 == 0:
            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            keyboard.add(types.KeyboardButton(text=call.from_user.username))
            await call.message.answer('–ò—Ç–∞–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...')
            await call.message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π —é–∑–µ—Ä–Ω–µ–π–º', reply_markup=keyboard)
        else:
            await call.message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –ø–∞—Ä–æ–ª—å', reply_markup=types.ReplyKeyboardRemove())
        await call.answer()


@dp.callback_query_handler(text='update_blank')
async def update_blank(call: types.CallbackQuery):
    global blank_values, update_flag, register_flag, search_flag, flag1
    if stop:
        await call.message.answer('–£–ø—Å... –ü–æ—Ö–æ–∂–µ —É –≤–∞—Å —Å–∫—Ä—ã—Ç —é–∑–µ—Ä–Ω–µ–π–º. –û—Ç–∫—Ä–æ–π—Ç–µ –µ–≥–æ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞')
    else:
        if len(db_values) == 0:
            await begin(call.message)
        else:
            register_flag = False
            search_flag = False
            update_flag = True
            flag1 = True
            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            for i in blank_values:
                keyboard.add(types.KeyboardButton(text=f'{i}'))
            await call.message.answer('–ß—Ç–æ –≤–∞—Å –Ω–µ —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç?', reply_markup=keyboard)
            await call.answer()


@dp.callback_query_handler(text='end_register')
async def end_register(call: types.CallbackQuery):
    global register_flag, admin_flag, update_flag, search_flag
    if stop:
        await call.message.answer('–£–ø—Å... –ü–æ—Ö–æ–∂–µ —É –≤–∞—Å —Å–∫—Ä—ã—Ç —é–∑–µ—Ä–Ω–µ–π–º. –û—Ç–∫—Ä–æ–π—Ç–µ –µ–≥–æ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞')
    else:
        if len(db_values) == 0:
            await begin(call.message)
        else:
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(types.InlineKeyboardButton(text='–ü–µ—Ä–µ–π—Ç–∏ –∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ —Å–∞–π—Ç–µ',
                                                    url='http://127.0.0.1:5000/login'))
            await call.message.answer('–í–æ—Ç —Å—Å—ã–ª–∫–∞.'
                                      ' –¢–∞–º –≤–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –≤–æ–π—Ç–∏ –ø–æ —é–∑–µ—Ä–Ω–µ–π–º—É –∏ –ø–∞—Ä–æ–ª—é, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –∑–¥–µ—Å—å –≤–≤–µ–ª–∏.',
                                      reply_markup=types.ReplyKeyboardRemove())
            await call.message.answer('–£–¥–∞—á–∏!', reply_markup=keyboard)
            data = {
                'name_surname': db_values[0],
                'gender': db_values[1],
                'username': db_values[2],
                'profession': db_values[3],
                'user_id': call.from_user.id,
                'is_admin': admin_flag,
                'password': db_values[4]}
            response = requests.get('http://127.0.0.1:5000/staff_api/end_register', data=data)
            if response:
                response = response.json()
                if response['success']:
                    keyboard = types.InlineKeyboardMarkup()
                    keyboard.insert(types.InlineKeyboardButton(text='–î–∞', callback_data='search'))
                    keyboard.insert(types.InlineKeyboardButton(text='–ù–µ—Ç', callback_data='ok'))
                    await call.message.answer('–•–æ—Ç–∏—Ç–µ –∫–æ–≥–æ-—Ç–æ –Ω–∞–π—Ç–∏?', reply_markup=keyboard)
                    await call.answer()
                    register_flag = True
                    search_flag = False
                    update_flag = False
                else:
                    await call.message.answer(f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –º—ã –Ω–µ —Å–º–æ–≥–ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–∞—à–∏ –¥–∞–Ω–Ω–Ω—ã–µ. –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞')
                    await call.message.answer(f'"Http —Å—Ç–∞—Ç—É—Å:", {response.status_code}, "(", {response.reason}, ")")')
            else:
                await call.message.answer(f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –º—ã –Ω–µ —Å–º–æ–≥–ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–∞—à–∏ –¥–∞–Ω–Ω–Ω—ã–µ. –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞')
                await call.message.answer(f'"Http —Å—Ç–∞—Ç—É—Å:", {response.status_code}, "(", {response.reason}, ")")')


@dp.callback_query_handler(text='search')
async def search(call: types.CallbackQuery):
    global search_flag, register_flag, update_flag
    if stop:
        await call.message.answer('–£–ø—Å... –ü–æ—Ö–æ–∂–µ —É –≤–∞—Å —Å–∫—Ä—ã—Ç —é–∑–µ—Ä–Ω–µ–π–º. –û—Ç–∫—Ä–æ–π—Ç–µ –µ–≥–æ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞')
    else:
        search_flag = True
        register_flag = False
        update_flag = False
        await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ (–ò–º—è –§–∞–º–∏–ª–∏—è –∏–ª–∏ –¥–æ–ª–∂–Ω–æ—Å—Ç—å)")


@dp.callback_query_handler(text='ok')
async def ok(call: types.CallbackQuery):
    if stop:
        await call.message.answer('–£–ø—Å... –ü–æ—Ö–æ–∂–µ —É –≤–∞—Å —Å–∫—Ä—ã—Ç —é–∑–µ—Ä–Ω–µ–π–º. –û—Ç–∫—Ä–æ–π—Ç–µ –µ–≥–æ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞')
    else:
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(text='–ò—Å–∫–∞—Ç—å –∫–æ–≥–æ-—Ç–æ...', callback_data='search'))
        await call.message.answer('–ù—É –æ–∫...', reply_markup=keyboard)
        await call.answer('OK')


@dp.message_handler(content_types=['text'])
async def db_insert(message: types.Message):
    global db_values, register_flag, search_flag, update_flag, flag1, flag2, new_value, update_value, stop, value1, json
    global authorize_flag
    if message.message_id != mes_id:
        if stop:
            await message.answer('–£–ø—Å... –ü–æ—Ö–æ–∂–µ —É –≤–∞—Å —Å–∫—Ä—ã—Ç —é–∑–µ—Ä–Ω–µ–π–º. –û—Ç–∫—Ä–æ–π—Ç–µ –µ–≥–æ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞')
        else:
            if register_flag:
                await message.reply('–≠—É –Ω–æ—Ä–º–∞–ª—å–Ω–æ –æ–±—â–∞–π—Å—è. –û–ö?')
            elif search_flag:

                response = requests.get(f'http://127.0.0.1:5000/staff_api/search/<str:{message.text}>')
                if response:
                    response = response.json()
                    success = response['success']
                    if success == 'ok':
                        name, surname = response['name_surname'].split()  # str
                        gender = response['gender']  # str
                        username = response['username']  # str
                        username = '@' + username
                        profession = response['profession']  # str
                        user_id = response['user_id']  # str
                        photo_path = f'\\photos\\{user_id}.jpg'
                        text = f'–ò–º—è: {name}\n–§–∞–º–∏–ª–∏—è: {surname}\n–ü–æ–ª: {gender}\n–î–æ–ª–∂–Ω–æ—Å—Ç—å: {profession}\n{username}'
                        await bot.send_photo(message.chat.id, types.InputFile(photo_path), caption=text)
                    else:
                        await message.answer('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ —ç—Ç–∏ –¥–∞–Ω–Ω—ã–º –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ:(')
                else:
                    await message.answer('–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞')
                    await message.answer(f'"Http —Å—Ç–∞—Ç—É—Å:", {response.status_code}, "(", {response.reason}, ")")')
            elif update_flag:
                new_value = True
                if new_value and message.text in blank_values:
                    update_value = message.text
                    new_value = False
                    flag1 = True
                else:
                    if flag1:
                        db_values[blank_values.index(update_value)] = message.text
                        flag1 = False
                    else:
                        flag2 = True
                if flag1:
                    if message.text != "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è":
                        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
                        keyboard.add(types.KeyboardButton(text=f'{db_values[blank_values.index(update_value)]}'))
                        await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.', reply_markup=keyboard)
                    else:
                        await message.answer('–û—Ç–ª–∏—á–Ω–æ', reply_markup=types.ReplyKeyboardRemove())
                        keyboard = types.InlineKeyboardMarkup()
                        keyboard.add(types.InlineKeyboardButton(text='–û—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–µ–∂–Ω–∏—é', callback_data='next_data'))
                        await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é', reply_markup=keyboard)
                else:
                    keyboard = types.InlineKeyboardMarkup()
                    keyboard.add(types.InlineKeyboardButton(text='–î–∞', callback_data='update_blank'))
                    keyboard.add(types.InlineKeyboardButton(text='–ù–µ—Ç', callback_data='end_register'))
                    await message.answer('–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã', reply_markup=types.ReplyKeyboardRemove())
                    await message.answer('–•–æ—Ç–∏—Ç–µ –µ—â—ë —á—Ç–æ-–Ω–∏–±—É–¥—å –∏–∑–º–µ–Ω–∏—Ç—å?', reply_markup=keyboard)
            elif authorize_flag:
                if value1 == 0:
                    json['username'] = message.text
                    value1 += 1
                    keyboard = types.InlineKeyboardMarkup()
                    keyboard.insert(types.InlineKeyboardButton(text='–î–∞', callback_data='authorize'))
                    keyboard.insert(types.InlineKeyboardButton(text='–ù–µ—Ç', callback_data='no'))
                    await message.answer('–í—ã —É–≤–µ—Ä–µ–Ω—ã?', reply_markup=keyboard)
                else:
                    json['password'] = message.text
                    authorize_flag = False
                    print(json)
                    response = requests.get(f'http://127.0.0.1:5000/staff_api/authorize/{json["username"]}/'
                                            f'{json["password"]}')
                    if response:
                        response = response.json()
                        print(response)
                        if response['success']:
                            keyboard = types.InlineKeyboardMarkup()
                            keyboard.insert(types.InlineKeyboardButton(text='–î–∞', callback_data='search'))
                            keyboard.insert(types.InlineKeyboardButton(text='–ù–µ—Ç', callback_data='ok'))
                            await message.answer('–•–æ—Ç–∏—Ç–µ –∫–æ–≥–æ-—Ç–æ –Ω–∞–π—Ç–∏?', reply_markup=keyboard)
                        else:
                            keyboard = types.InlineKeyboardMarkup()
                            keyboard.add(types.InlineKeyboardButton(text='–ó–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è',
                                                                    callback_data='common'))
                            keyboard.add(types.InlineKeyboardButton(text='–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑',
                                                                    callback_data='authorize'))
                            await message.answer('–ù–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–¥—ë–Ω —é–∑–µ—Ä–Ω–µ–π–º –∏–ª–∏ –ø–∞—Ä–æ–ª—å')
                            await message.answer("–•–æ—Ç–∏—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –≤—Å—ë —Ç–∞–∫–∏ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä—É–µ—Ç–µ—Å—å?",
                                                 reply_markup=keyboard)
                    else:
                        await message.answer('–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞')
                        await message.answer(f'"Http —Å—Ç–∞—Ç—É—Å:", {response.status_code}, "(", {response.reason},'
                                             f' ")")')
            else:
                if len(db_values) == 0:
                    if ' ' in message.text:
                        db_values.append(message.text)
                    else:
                        await message.answer('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–≤–µ–¥–µ–Ω—ã –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—è')
                else:
                    if message.text.isdigit():
                        db_values.append(int(message.text))
                    else:
                        db_values.append(message.text)
                if not photo_flag:
                    await next1(message)
                else:
                    keyboard = types.InlineKeyboardMarkup()
                    keyboard.add(types.InlineKeyboardButton(text='–î–∞', callback_data='end_register'))
                    keyboard.add(types.InlineKeyboardButton(text='–ù–µ—Ç', callback_data='update_blank'))
                    await message.answer('–û—Ç–ª–∏—á–Ω–æ', reply_markup=types.ReplyKeyboardRemove())
                    await message.answer('–ó–∞–∫–æ–Ω—á–∏–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é?', reply_markup=keyboard)


@dp.callback_query_handler(text='no')
async def no(call: types.CallbackQuery):
    global value1
    value1 = 0
    await authorize(call)


async def next1(message: types.Message):
    global ind, count_values, db_values
    if stop:
        await message.answer('–£–ø—Å... –ü–æ—Ö–æ–∂–µ —É –≤–∞—Å —Å–∫—Ä—ã—Ç —é–∑–µ—Ä–Ω–µ–π–º. –û—Ç–∫—Ä–æ–π—Ç–µ –µ–≥–æ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞')
    else:
        if len(db_values) == 0:
            await begin(message)
        else:
            if count_values == len(db_values):
                ind += 1
                await register_asks_message(message)
                count_values += 1
            else:
                await message.answer('–í—ã –µ—â—ë –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –ø—Ä–æ—à–ª—ã–π –≤–æ–ø—Ä–æ—Å')


@dp.callback_query_handler(text='next_data')
async def next_data(call: types.CallbackQuery):
    if stop:
        await call.message.answer('–£–ø—Å... –ü–æ—Ö–æ–∂–µ —É –≤–∞—Å —Å–∫—Ä—ã—Ç —é–∑–µ—Ä–Ω–µ–π–º. –û—Ç–∫—Ä–æ–π—Ç–µ –µ–≥–æ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞')
    else:
        if len(db_values) == 0:
            await begin(call.message)
        else:
            await call.message.answer('OK')
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(types.InlineKeyboardButton(text='–î–∞', callback_data='end_register'))
            keyboard.add(types.InlineKeyboardButton(text='–ù–µ—Ç', callback_data='update_blank'))
            await call.message.answer('–û—Ç–ª–∏—á–Ω–æ', reply_markup=types.ReplyKeyboardRemove())
            await call.message.answer('–ó–∞–∫–æ–Ω—á–∏–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é?', reply_markup=keyboard)


@dp.message_handler(content_types=['photo'])
async def handle_docs_photo(message: types.Message):
    global update_flag, last_username, photo_flag
    if stop:
        await message.answer('–£–ø—Å... –ü–æ—Ö–æ–∂–µ —É –≤–∞—Å —Å–∫—Ä—ã—Ç —é–∑–µ—Ä–Ω–µ–π–º. –û—Ç–∫—Ä–æ–π—Ç–µ –µ–≥–æ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞')
    else:
        await message.answer(await message.photo[-1].download(f'\\photos\\{message.chat.id}.jpg'))
        await message.answer('–í–∞—à–µ —Ñ–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.')
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(text='–î–∞', callback_data='update_blank'))
        keyboard.add(types.InlineKeyboardButton(text='–ù–µ—Ç', callback_data='end_register'))
        if update_flag:
            await message.answer('–•–æ—Ç–∏—Ç–µ –µ—â—ë —á—Ç–æ-–Ω–∏–±—É–¥—å –∏–∑–º–µ–Ω–∏—Ç—å?', reply_markup=keyboard)
        else:
            await message.answer('–•–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É?', reply_markup=keyboard)


@dp.message_handler(content_types=['file'])
async def files(message: types.Message):
    if stop:
        await message.answer('–£–ø—Å... –ü–æ—Ö–æ–∂–µ —É –≤–∞—Å —Å–∫—Ä—ã—Ç —é–∑–µ—Ä–Ω–µ–π–º. –û—Ç–∫—Ä–æ–π—Ç–µ –µ–≥–æ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞')
    else:
        await message.answer('–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –æ—á–µ–Ω—å –±–æ—é—Å—å —Ñ–∞–π–ª–æ–≤—ã—Ö –±–æ–º–± >-<')


async def register_asks_message(message: types.Message):
    global asks, ind, stop
    if stop:
        await message.answer('–£–ø—Å... –ü–æ—Ö–æ–∂–µ —É –≤–∞—Å —Å–∫—Ä—ã—Ç —é–∑–µ—Ä–Ω–µ–π–º. –û—Ç–∫—Ä–æ–π—Ç–µ –µ–≥–æ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞')
    else:
        telegram_values = [message.from_user.first_name + " " + message.from_user.last_name, '–ú—É–∂—á–∏–Ω–∞',
                           message.from_user.username, '', '', '']
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        if ind <= 2:
            if len(telegram_values[ind]) != 0:
                keyboard.add(types.KeyboardButton(text=f'{telegram_values[ind]}'))
            else:
                await message.answer('–£–ø—Å... –ü–æ—Ö–æ–∂–µ —É –≤–∞—Å —Å–∫—Ä—ã—Ç —é–∑–µ—Ä–Ω–µ–π–º. –û—Ç–∫—Ä–æ–π—Ç–µ –µ–≥–æ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞')
                stop = True
        if ind == 1:
            keyboard.add(types.KeyboardButton(text='–ñ–µ–Ω—â–∏–Ω–∞'))
        if ind < len(asks):
            await message.answer(f'–£–∫–∞–∂–∏—Ç–µ {asks[ind]}', reply_markup=keyboard)
        else:
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(types.InlineKeyboardButton(text='–î–∞', callback_data='update_blank'))
            keyboard.add(types.InlineKeyboardButton(text='–ù–µ—Ç', callback_data='end_register'))
            await message.answer('–•–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É?', reply_markup=keyboard)


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=False)
